#include <cppunit/ui/text/TestRunner.h>
#include <cppunit/extensions/HelperMacros.h>
#include <cppunit/extensions/TestFactoryRegistry.h>
#include <cppunit/BriefTestProgressListener.h>
#include <cppunit/CompilerOutputter.h>
#include <cppunit/TextOutputter.h>
#include <cppunit/extensions/TestFactoryRegistry.h>
#include <cppunit/TestResult.h>
#include <cppunit/TestRunner.h>
#include <cppunit/TestResultCollector.h>
#include "parse.h"
#include "protein.h"
#include <iostream>

class ParseTest : public CppUnit::TestFixture
{

private:
    CPPUNIT_TEST_SUITE( ParseTest );
    CPPUNIT_TEST( testValidFilenameStored );
    CPPUNIT_TEST( testReadProteinFromFasta );
    CPPUNIT_TEST( testReadProteinFromFasta2 );
    CPPUNIT_TEST( testReadProteinFromFasta3 );
    CPPUNIT_TEST( testReadProteinFromFasta4 );
    CPPUNIT_TEST( testReadProteinAndMakeProteinObject );
    CPPUNIT_TEST( testReadCommentFromFasta );
    CPPUNIT_TEST( testGetEncodingFromProtein );
    CPPUNIT_TEST( testAminoSummaryForProtein );
    CPPUNIT_TEST( testReadProteinsFromMultifasta );
    CPPUNIT_TEST( testReadCommentsFromMultifasta );
    CPPUNIT_TEST( testCombineFrequencyInfo );
    CPPUNIT_TEST( testFrequencyForSummary );
    //CPPUNIT_TEST( testProteinEquality );

    CPPUNIT_TEST_SUITE_END();

public:
    void setUp() {}

    void tearDown() {}

    // Parser tests
    void testValidFilenameStored()
    {
        string filename = "tests/fastas/p1.fasta";
        FastaParser parser = FastaParser(filename);
        CPPUNIT_ASSERT_EQUAL(filename, parser.getFilename());
    }

    void testReadCommentFromFasta()
    {
        FastaParser parser = FastaParser("tests/fastas/p1.fasta");
        string comment = ">DARPIN_20 mol:protein length:124";
        CPPUNIT_ASSERT_EQUAL(comment, parser.getComment());
    }

    void testReadProteinFromFasta()
    {
        FastaParser parser = FastaParser("tests/fastas/p1.fasta");
        string protein = "SDLGKKLLEAARAGQDDEVRILMANGADVNAEDKVGLTPLHLAAMNDHLEIVEVLLKNGADVNAIDAIGETPLHLVAMYGHLEIVEVLLKHGADVNAQDKFGKTAFDISIDNGNEDLAEILQKL";
        CPPUNIT_ASSERT_EQUAL(protein, parser.getProtein());
    }

    void testReadProteinFromFasta2()
    {
        FastaParser parser = FastaParser("tests/fastas/p2.fasta");
        string protein = "SDLGKKLLEAARAGQDDEVRILMANGADVNANDWFGITPLHLVVNNGHLEIIEVLLKYAADVNASDKSGWTPLHLAAYRGHLEIVEVLLKYGADVNAMDYQGYTPLHLAAEDGHLEIVEVLLKYGADVNAQDKFGKTAFDISIDNGNEDLAEILQ";
        CPPUNIT_ASSERT_EQUAL(protein, parser.getProtein());
    }

    void testReadProteinFromFasta3()
    {
        FastaParser parser = FastaParser("tests/fastas/p3.fasta");
        string protein = "MADPEDPRDAGDVLGDDSFPLSSLANLFEVEDTPSPAEPSRGPPGAGDGKQNLRMKFHGA"
"FRKGPPKPMELLESTIYESSVVPAPKKAPMDSLFDYGTYRQHPSENKRWRRRVVEKPVAG"
"TKGPAPNPPPVLKVFNRPILFDIVSRGSPDGLEGLLSFLLTHKKRLTDEEFREPSTGKTC"
"LPKALLNLSAGRNDTIPILLDIAEKTGNMREFINSPFRDVYYRGQTALHIAIERRCKHYV"
"ELLVEKGADVHAQARGRFFQPKDEGGYFYFGELPLSLAACTNQPHIVHYLTENGHKQADL"
"RRQDSRGNTVLHALVAIADNTRENTKFVTKMYDLLLIKCAKLFPDTNLEALLNNDGLSPL"
"MMAAKTGKIGIFQHIIRREIADEDVRHLSRKFKDWAYGPVYSSLYDLSSLDTCGEEVSVL"
"EILVYNSKIENRHEMLAVEPINELLRDKWRKFGAVSFYISVVSYLCAMIIFTLIAYYRPM"
"EGPPPYPYTTTIDYLRLAGEIITLLTGILFFFSNIKDLFMKKCPGVNSFFIDGSFQLLYF"
"IYSVLVIVTAGLYLGGVEAYLAVMVFALVLGWMNALYFTRGLKLTGTYSIMIQKILFKDL"
"FRFLLVYLLFMIGYASALVSLLNPCPSSESCSEDHSNCTLPTYPSCRDSQTFSTFLLDLF"
"KLTIGMGDLEMLESAKYPGVFIILLVTYIILTFVLLLNMLIALMGETVGQVSKESKHIWK"
"LQWATTILDIERSFPLFLRRAFRSGEMVTVGKGTDGTPDRRWCFRVDEVNWSHWNQNLGI"
"ISEDPGKSDTYQYYGFSHTVGRLRRDRWSTVVPRVVELNKSCPTEDVVVPLGTMGTAEAR"
"ERRHGQTPSSPL";
        CPPUNIT_ASSERT_EQUAL(protein, parser.getProtein());
    }

    /*
    void testProteinEquality()
    {
        string protein1 = "MADPEDPRDAGDVLGDDSFPLSSLANLFEVEDTPSPAEPSRGPPGAGDGKQNLRMKFHGA"
"FRKGPPKPMELLESTIYESSVVPAPKKAPMDSLFDYGTYRQHPSENKRWRRRVVEKPVAG"
"TKGPAPNPPPVLKVFNRPILFDIVSRGSPDGLEGLLSFLLTHKKRLTDEEFREPSTGKTC"
"LPKALLNLSAGRNDTIPILLDIAEKTGNMREFINSPFRDVYYRGQTALHIAIERRCKHYV"
"ELLVEKGADVHAQARGRFFQPKDEGGYFYFGELPLSLAACTNQPHIVHYLTENGHKQADL"
"RRQDSRGNTVLHALVAIADNTRENTKFVTKMYDLLLIKCAKLFPDTNLEALLNNDGLSPL"
"MMAAKTGKIGIFQHIIRREIADEDVRHLSRKFKDWAYGPVYSSLYDLSSLDTCGEEVSVL"
"EILVYNSKIENRHEMLAVEPINELLRDKWRKFGAVSFYISVVSYLCAMIIFTLIAYYRPM"
"EGPPPYPYTTTIDYLRLAGEIITLLTGILFFFSNIKDLFMKKCPGVNSFFIDGSFQLLYF"
"IYSVLVIVTAGLYLGGVEAYLAVMVFALVLGWMNALYFTRGLKLTGTYSIMIQKILFKDL"
"FRFLLVYLLFMIGYASALVSLLNPCPSSESCSEDHSNCTLPTYPSCRDSQTFSTFLLDLF"
"KLTIGMGDLEMLESAKYPGVFIILLVTYIILTFVLLLNMLIALMGETVGQVSKESKHIWK"
"LQWATTILDIERSFPLFLRRAFRSGEMVTVGKGTDGTPDRRWCFRVDEVNWSHWNQNLGI"
"ISEDPGKSDTYQYYGFSHTVGRLRRDRWSTVVPRVVELNKSCPTEDVVVPLGTMGTAEAR"
"ERRHGQTPSSPL";

        string protein2 = "MKMADAKQKRNEQLKRWIGSETDLEPPVVKRKKTKVKFDDGAVFLAACSSGDTEEVLRLL"
"ERGADINYANVDGLTALHQACIDDNVDMVKFLVENGANINQPDNEGWIPLHAAASCGYLD"
"IAEYLISQGAHVGAVNSEGDTPLDIAEEEAMEELLQNEVNRQGVDIEAARKEEERIMLRD"
"ARQWLNSGHINDVRHAKSGGTALHVAAAKGYTEVLKLLIQARYDVNIKDYDGWTPLHAAA"
"HWGKEEACRILVENLCDMEAVNKVGQTAFDVADEDILGYLEELQKKQNLLHSEKREKKSP"
"LIESTANLDNNQTQKTFKNKETLIMEQEKNASSIESLEHEKADEEEEGKKDESSCSSEEE"
"EDDDSESEAETDKAKTLANANTTSTQSASMTAPSVAGGQGTPTSPLKKFPTSTTKVSPKE"
"EERKDESPASWRLGLRKTGSYGALAEITASKEAQKEKDSAGVIRSASSPRLSSSLDNKEK"
"EKDGKGTRLAYVAPTIPRRLASTSDIDEKENRDSSASSIRSGSSYARRKWEEDVKKNSLN"
"EGPTSLNTSYQRSGSFGRRQDDLVSSNVPSTASTVTSSAGLQKTLPASANTTTKSTTGST"
"SAGVQSSTSNRLWAEDSTEKEKDSVPTAVTVPVAPSVVNAAATTTAMTTATSGTVSSTSE"
"VRERRRSYLTPVRDEESESQRKARSRQARQSRRSTQGVTLTDLQEAEKTIGRSRSTRTRE"
"QENEEKEKEEKEKQDKEKQEEKKESETKDDDYRQRYSRTVEEPYHRYRPTSTSTSTSSTS"
"SLSTSTSSLSSSSQLNRPNSLIGITSAYSRSGTKESEREGGKKEEEKEEDKSQPKSIRER"
"RRPREKRRSTGVSFWTQDSDENEQEHQSDSEEGTNKKETQSDSLSRYDTGSLSVSSGDRY"
"DSAQGRSGSQSYLEDRKPYCSRLEKEDSTDFKKLYEQILAENEKLKAQLHDTNMELTDLK"
"LQLEKTTQRQERFADRSLLEMEKRVSGKSQYLLGGKKSSRKKDI";

        Protein p1 = Protein(protein1);
        Protein p2 = Protein(protein2);

        Protein p11 = Protein(protein1);
        Protein p22 = Protein(protein2);

        CPPUNIT_ASSERT_EQUAL(p1, p11);
        CPPUNIT_ASSERT_EQUAL(p1, p1);
        CPPUNIT_ASSERT_EQUAL(p2, p2);
        CPPUNIT_ASSERT_EQUAL(p2, p22);
        CPPUNIT_ASSERT_NOT_EQUAL(p1,p2);
        CPPUNIT_ASSERT_NOT_EQUAL(p11,p2);
        CPPUNIT_ASSERT_NOT_EQUAL(p11,p22);
    }
    */

    void testReadProteinFromFasta4()
    {
        FastaParser parser = FastaParser("tests/fastas/p4.fasta");
        string protein = "MKMADAKQKRNEQLKRWIGSETDLEPPVVKRKKTKVKFDDGAVFLAACSSGDTEEVLRLL"
"ERGADINYANVDGLTALHQACIDDNVDMVKFLVENGANINQPDNEGWIPLHAAASCGYLD"
"IAEYLISQGAHVGAVNSEGDTPLDIAEEEAMEELLQNEVNRQGVDIEAARKEEERIMLRD"
"ARQWLNSGHINDVRHAKSGGTALHVAAAKGYTEVLKLLIQARYDVNIKDYDGWTPLHAAA"
"HWGKEEACRILVENLCDMEAVNKVGQTAFDVADEDILGYLEELQKKQNLLHSEKREKKSP"
"LIESTANLDNNQTQKTFKNKETLIMEQEKNASSIESLEHEKADEEEEGKKDESSCSSEEE"
"EDDDSESEAETDKAKTLANANTTSTQSASMTAPSVAGGQGTPTSPLKKFPTSTTKVSPKE"
"EERKDESPASWRLGLRKTGSYGALAEITASKEAQKEKDSAGVIRSASSPRLSSSLDNKEK"
"EKDGKGTRLAYVAPTIPRRLASTSDIDEKENRDSSASSIRSGSSYARRKWEEDVKKNSLN"
"EGPTSLNTSYQRSGSFGRRQDDLVSSNVPSTASTVTSSAGLQKTLPASANTTTKSTTGST"
"SAGVQSSTSNRLWAEDSTEKEKDSVPTAVTVPVAPSVVNAAATTTAMTTATSGTVSSTSE"
"VRERRRSYLTPVRDEESESQRKARSRQARQSRRSTQGVTLTDLQEAEKTIGRSRSTRTRE"
"QENEEKEKEEKEKQDKEKQEEKKESETKDDDYRQRYSRTVEEPYHRYRPTSTSTSTSSTS"
"SLSTSTSSLSSSSQLNRPNSLIGITSAYSRSGTKESEREGGKKEEEKEEDKSQPKSIRER"
"RRPREKRRSTGVSFWTQDSDENEQEHQSDSEEGTNKKETQSDSLSRYDTGSLSVSSGDRY"
"DSAQGRSGSQSYLEDRKPYCSRLEKEDSTDFKKLYEQILAENEKLKAQLHDTNMELTDLK"
"LQLEKTTQRQERFADRSLLEMEKRVSGKSQYLLGGKKSSRKKDI";
        CPPUNIT_ASSERT_EQUAL(protein, parser.getProtein());
    }

    void testReadProteinAndMakeProteinObject()
    {
        string filename = "tests/fastas/p4.fasta";
        FastaParser parser = FastaParser(filename);
        string protein = "MKMADAKQKRNEQLKRWIGSETDLEPPVVKRKKTKVKFDDGAVFLAACSSGDTEEVLRLL"
"ERGADINYANVDGLTALHQACIDDNVDMVKFLVENGANINQPDNEGWIPLHAAASCGYLD"
"IAEYLISQGAHVGAVNSEGDTPLDIAEEEAMEELLQNEVNRQGVDIEAARKEEERIMLRD"
"ARQWLNSGHINDVRHAKSGGTALHVAAAKGYTEVLKLLIQARYDVNIKDYDGWTPLHAAA"
"HWGKEEACRILVENLCDMEAVNKVGQTAFDVADEDILGYLEELQKKQNLLHSEKREKKSP"
"LIESTANLDNNQTQKTFKNKETLIMEQEKNASSIESLEHEKADEEEEGKKDESSCSSEEE"
"EDDDSESEAETDKAKTLANANTTSTQSASMTAPSVAGGQGTPTSPLKKFPTSTTKVSPKE"
"EERKDESPASWRLGLRKTGSYGALAEITASKEAQKEKDSAGVIRSASSPRLSSSLDNKEK"
"EKDGKGTRLAYVAPTIPRRLASTSDIDEKENRDSSASSIRSGSSYARRKWEEDVKKNSLN"
"EGPTSLNTSYQRSGSFGRRQDDLVSSNVPSTASTVTSSAGLQKTLPASANTTTKSTTGST"
"SAGVQSSTSNRLWAEDSTEKEKDSVPTAVTVPVAPSVVNAAATTTAMTTATSGTVSSTSE"
"VRERRRSYLTPVRDEESESQRKARSRQARQSRRSTQGVTLTDLQEAEKTIGRSRSTRTRE"
"QENEEKEKEEKEKQDKEKQEEKKESETKDDDYRQRYSRTVEEPYHRYRPTSTSTSTSSTS"
"SLSTSTSSLSSSSQLNRPNSLIGITSAYSRSGTKESEREGGKKEEEKEEDKSQPKSIRER"
"RRPREKRRSTGVSFWTQDSDENEQEHQSDSEEGTNKKETQSDSLSRYDTGSLSVSSGDRY"
"DSAQGRSGSQSYLEDRKPYCSRLEKEDSTDFKKLYEQILAENEKLKAQLHDTNMELTDLK"
"LQLEKTTQRQERFADRSLLEMEKRVSGKSQYLLGGKKSSRKKDI"
;
        
        Protein pObj = Protein(parser.getProtein(), filename);
        CPPUNIT_ASSERT_EQUAL(protein, pObj.getEncoding());
        CPPUNIT_ASSERT_EQUAL(filename, pObj.getFilename());
    }

    void testReadProteinsFromMultifasta()
    {
        FastaParser parser = FastaParser("tests/fastas/multi.fasta");
        string protein1 = "ACTCCCCGTGCGCGCCCGGCCCGTAGCGTCCTCGTCGCCGCCCCTCGTCTCGCAGCCGCAGCCCGCGTGGACGCTCTCGCCTGAGCGCCGCGGACTAGCCCGGGTGGCC";
        string protein2 = "CAGTCCGGCAGCGCCGGGGTTAAGCGGCCCAAGTAAACGTAGCGCAGCGATCGGCGCCGGAGATTCGCGAACCCGACACTCCGCGCCGCCCGCCGGCCAGGACCCGCGGCGCGATCGCGGCGCCGCGCTACAGCCAGCCTCACTGGCGCGCGGGCGAGCGCACGGGCGCTC";
        string protein3 = "CACGACAGGCCCGCTGAGGCTTGTGCCAGACCTTGGAAACCTCAGGTATATACCTTTCCAGACGCGGGATCTCCCCTCCCC";
        string protein4 = "CAGCAGACATCTGAATGAAGAAGAGGGTGCCAGCGGGTATGAGGAGTGCATTATCGTTAATGGGAACTTCAGTGACCAGTCCTCAGACACGAAGGATGCTCCCTCACCCCCAGTCTTGGAGGCAATCTGCACAGAGCCAGTCTGCACACC";
        std::vector< std::pair<string,string> > proteins = parser.getProteins();
        CPPUNIT_ASSERT_EQUAL(protein1, proteins[0].first);
        CPPUNIT_ASSERT_EQUAL(protein2, proteins[1].first);
        CPPUNIT_ASSERT_EQUAL(protein3, proteins[2].first);
        CPPUNIT_ASSERT_EQUAL(protein4, proteins[3].first);
    }

    void testReadCommentsFromMultifasta()
    {
        FastaParser parser = FastaParser("tests/fastas/multi.fasta");
        string protein1 = ">sequence1";
        string protein2 = ">sequence2";
        string protein3 = ">sequence3";
        string protein4 = ">sequence4";
        std::vector< std::pair<string,string> > proteins = parser.getProteins();
        CPPUNIT_ASSERT_EQUAL(protein1, proteins[0].second);
        CPPUNIT_ASSERT_EQUAL(protein2, proteins[1].second);
        CPPUNIT_ASSERT_EQUAL(protein3, proteins[2].second);
        CPPUNIT_ASSERT_EQUAL(protein4, proteins[3].second);
    }

    void testGetEncodingFromProtein()
    {
        FastaParser parser = FastaParser("tests/fastas/p1.fasta");
        string proteinEncoding = "SDLGKKLLEAARAGQDDEVRILMANGADVNAEDKVGLTPLHLAAMNDHLEIVEVLLKNGADVNAIDAIGETPLHLVAMYGHLEIVEVLLKHGADVNAQDKFGKTAFDISIDNGNEDLAEILQKL";
        Protein protein = Protein(proteinEncoding);
        CPPUNIT_ASSERT_EQUAL(proteinEncoding, protein.getEncoding());
    }

    void testAminoSummaryForProtein()
    {
      string proteinEncoding = "AAAACCDDDEEEERRRRR";
      Protein protein = Protein(proteinEncoding);
      map<char,int> summary = protein.getAminoSummary();

      CPPUNIT_ASSERT_EQUAL(summary['A'], 4);
      CPPUNIT_ASSERT_EQUAL(summary['C'], 2);
      CPPUNIT_ASSERT_EQUAL(summary['D'], 3);
      CPPUNIT_ASSERT_EQUAL(summary['E'], 4);
      CPPUNIT_ASSERT_EQUAL(summary['R'], 5);
      CPPUNIT_ASSERT(summary['R'] != 6);
      CPPUNIT_ASSERT_EQUAL((int)summary.count('M'), 0);
    }


    void testCombineFrequencyInfo()
    {
      string proteinEncoding = "AAAACCDDDEEEERRRRR";
      Protein protein = Protein(proteinEncoding);
      map<char,int> s1 = protein.getAminoSummary();

      Protein other = Protein(string("MMMRA"));
      map<char,int> s2 = other.getAminoSummary();

      Protein::combineSummary(s1,s2);

      CPPUNIT_ASSERT_EQUAL(5, s1['R']);
      CPPUNIT_ASSERT_EQUAL(4, s1['A']);
      
      CPPUNIT_ASSERT_EQUAL(5, s2['A']);
      CPPUNIT_ASSERT_EQUAL(2, s2['C']);
      CPPUNIT_ASSERT_EQUAL(3, s2['D']);
      CPPUNIT_ASSERT_EQUAL(4, s2['E']);
      CPPUNIT_ASSERT_EQUAL(6, s2['R']);
      CPPUNIT_ASSERT_EQUAL(3, s2['M']);
      
      CPPUNIT_ASSERT(s2['R'] != 5);
    }

    void testFrequencyForSummary()
    {
      string proteinEncoding = "AAAAARRRRR";
      Protein protein = Protein(proteinEncoding);
      map<char,int> summary = protein.getAminoSummary();

      double expected = 0.5;
      double r1 = ((double)summary['A']/(double)protein.getLength());
      double r2 = ((double)summary['R']/(double)protein.getLength());
      CPPUNIT_ASSERT_EQUAL(5, summary['A']);
      CPPUNIT_ASSERT_EQUAL(10, protein.getLength());
      CPPUNIT_ASSERT_DOUBLES_EQUAL(expected, r1, 0.01);
      CPPUNIT_ASSERT_DOUBLES_EQUAL(expected, r2, 0.01);
    }
};

CPPUNIT_TEST_SUITE_REGISTRATION( ParseTest );

int main(int argc, char** argv)
{
    // Create the event manager and test controller
    CppUnit::TestResult controller;
    // Add a listener that colllects test result
    CppUnit::TestResultCollector result;
    controller.addListener( &result );
    // Add a listener that print dots as test run.
    CppUnit::BriefTestProgressListener progress;
    controller.addListener( &progress );

    CppUnit::TextUi::TestRunner runner;
    CppUnit::TestFactoryRegistry &registry = CppUnit::TestFactoryRegistry::getRegistry();
    runner.addTest( registry.makeTest() );
    std::cout << std::endl << " ====== Running Tests ======" << std::endl;
    runner.run(controller);
    // Print test in a compiler compatible format.
    std::cout << std::endl << " ====== Test Results ======" << std::endl;
    CppUnit::CompilerOutputter outputter( &result, CppUnit::stdCOut() );
    //CppUnit::TextOutputter outputter( &result, CppUnit::stdCOut() );
    outputter.write();

    return result.wasSuccessful() ? 0 : 1;
}